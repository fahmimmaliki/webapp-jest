name: CI/CD Pipeline for NextJS

on:
  push:
    branches:
      - main
env:
  REGISTRY: docker.io
  IMAGE_NAME: fahmimahmud/web-app
  SONARQUBE_PROJECT_KEY: webapp-jest # SonarQube project key
  SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
  EKS_CLUSTER_NAME: assessment-eks
  AWS_REGION: ap-southeast-3
  TRIVY_SEVERITY: "HIGH,CRITICAL" # Trivy will scan for High and Critical vulnerabilities only

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm run test:ci

      - name: Add Sonarqube project key
        run: echo 'sonar.projectKey=${{ env.SONARQUBE_PROJECT_KEY }}' > sonar-project.properties
      
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: fahmimahmud
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }} .

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
          severity: ${{ env.TRIVY_SEVERITY }}
          format: table
      - name: Push Docker image to registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/nextjs-app nextjs-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
          kubectl rollout status deployment/nextjs-app

      - name: Rollback if deployment fails
        if: failure()
        run: |
          kubectl rollout undo deployment/nextjs-app

          - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
  
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
  
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/nextjs-app nextjs-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }}
          kubectl rollout status deployment/nextjs-app
  
      - name: Rollback if deployment fails
        if: failure()
        run: |
          kubectl rollout undo deployment/nextjs-app